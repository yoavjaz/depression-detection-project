# -*- coding: utf-8 -*-
"""final projact - transformer - predict

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wLIofkPHxLPtZo7daOgOisyYI5R03Qkx

משחזר את ארכיטקטורת המודל ולאחר מכן מייבא את המשקלים הנשמרים שלו
"""

from transformers import TFBertModel
import tensorflow as tf


bert_model = TFBertModel.from_pretrained("bert-base-uncased")


input_ids = tf.keras.layers.Input(shape=(300,), dtype=tf.int32, name="input_ids")
attention_mask = tf.keras.layers.Input(shape=(300,), dtype=tf.int32, name="attention_mask")

bert_output = tf.keras.layers.Lambda(
    lambda x: bert_model(input_ids=x[0], attention_mask=x[1]).last_hidden_state,
    output_shape=(300, 768)
)([input_ids, attention_mask])

lstm_output = tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128))(bert_output)
dense1 = tf.keras.layers.Dense(128, activation="relu")(lstm_output)
dropout = tf.keras.layers.Dropout(0.3)(dense1)
dense2 = tf.keras.layers.Dense(64, activation="relu")(dropout)
output = tf.keras.layers.Dense(1, activation="sigmoid")(dense2)

model = tf.keras.Model(inputs=[input_ids, attention_mask], outputs=output)


model.load_weights("/content/drive/MyDrive/checkpoints/best_model.h5")

import matplotlib.pyplot as plt


plt.figure(figsize=(10, 5))
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()


plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import seaborn as sns


y_pred = model.predict({"input_ids": val_encodings["input_ids"], "attention_mask": val_encodings["attention_mask"]})
y_pred = (y_pred > 0.5).astype(int)

cm = confusion_matrix(y_val, y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

import numpy as np
import tensorflow as tf
from transformers import BertTokenizer
import re



def predict(text):
    import tensorflow as tf



    tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")


    cleaned_text = clean_text(text)
    encodings = tokenizer(
        [cleaned_text],
        max_length=300,
        padding='max_length',
        truncation=True,
        return_tensors="tf"
    )


    prediction = model.predict({"input_ids": encodings["input_ids"], "attention_mask": encodings["attention_mask"]})


    return "most likely not depreesed" if prediction[0][0] < 0.5 else "might have depression"

def clean_text(text):
    text = re.sub(r'[^\w\s]', '', text)
    text = text.lower()
    return text

while True:
  user_input = input("How do you feel in these past few days? ")
  if user_input == "exit":
    break
  prediction = predict(user_input)
  print(f"Prediction: {prediction}")