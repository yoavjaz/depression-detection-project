# -*- coding: utf-8 -*-
"""final projact - LSTM - predict

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pU9NdBMxkSgfKbZCEnc_gY_fMyN1gAKj

בונה מטריצת בלבול
"""

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix


y_pred = model.predict(X_val)
y_pred_classes = (y_pred > 0.5).astype(int)


conf_matrix = confusion_matrix(y_val, y_pred_classes)


plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Not Depressed', 'Depressed'],
            yticklabels=['Not Depressed', 'Depressed'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""בונה פונקציית סיווג שמשתמשת במודל שיצרנו ומזהה אם טקסט שנכנס אליה הוא בן אדם בדיכאון"""

# טעינת המודל
import tensorflow as tf
import re
import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
model = tf.keras.models.load_model('/content/drive/MyDrive/checkpoints/best_model_lstm.h5')


def predict_sentiment(text):
    """
    מנבא את הסנטימנט (חיובי או שלילי) למשפט נתון.
    """

    def clean_text(text):
        text = re.sub(r'[^\w\s]', '', text)
        text = text.lower()
        return text

    cleaned_text = clean_text(text)
    import pickle

    with open('/content/drive/MyDrive/checkpoints/tokenizer_lstm.pkl', 'rb') as handle:
      tokenizer = pickle.load(handle)



    sequences = tokenizer.texts_to_sequences([cleaned_text])


    max_length = 25
    padded_sequence = pad_sequences(sequences, maxlen=max_length, padding='post')


    prediction = model.predict(padded_sequence)[0][0]


    if prediction >= 0.5:
        return "might be depressed"
    else:
        return "most likely not depressed"

"""בודק את המודל שלי עם דוגמאות של עצמי"""

sentence_1 = "I feel very bad. I had a nightmare and I cant take it anymore."
sentence_2 = "i am so  happy, all i want to do is to smile"
print("sentence number 1 is a man who",predict_sentiment(sentence_1))
print("sentence number 2 is a man who",predict_sentiment(sentence_2))

"""ממשיך לבחון את המודל עם דוגמאות שלי"""

user_input = input("How do you feel in these past few days? ")


prediction = predict_sentiment(user_input)


print(f"Prediction: {prediction}")

user_input = input("How do you feel in these past few days? ")


prediction = predict_sentiment(user_input)


print(f"Prediction: {prediction}")

while True:
  user_input = input("How do you feel in these past few days? ")
  if user_input == "exit":
    break
  prediction = predict_sentiment(user_input)
  print(f"Prediction: {prediction}")

while True:
  user_input = input("How do you feel in these past few days? ")
  if user_input == "exit":
    break
  prediction = predict_sentiment(user_input)
  print(f"Prediction: {prediction}")